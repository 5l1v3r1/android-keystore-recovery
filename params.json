{"name":"Android Keystore Recovery","tagline":"A tool to recover your lost Android keystore password ","body":"[![Build Status](https://travis-ci.org/rsertelon/android-keystore-recovery.svg?branch=master)](https://travis-ci.org/rsertelon/android-keystore-recovery)\r\n\r\n## Android Keystore Recovery\r\n\r\nThis project aims to solve the \"password forgotten\" problem for (Android) developers who happen to manage java keystore(s).\r\n\r\n## Usage\r\n\r\nThis bruteforce tool is very simple, yet efficient. It will try all password combinations matching `[A-Za-z0-9]+` by default, from the shortest password, up to the solution.\r\n\r\n1. Download the [project jar](https://repo1.maven.org/maven2/fr/sertelon/akr/android-keystore-recovery/1.4.0/android-keystore-recovery-1.4.0-bundle.jar)\r\n2. Launch the bruteforce: `java -jar android-keystore-recovery-1.4.0-bundle.jar <keystore> [opts]`\r\n\r\n## Options\r\n\r\nThese are the available options for AKR:\r\n\r\n### Generic options\r\n\r\n* `-l <length>   | --min-length <length>` start at given length\r\n* `-f <password> | --from <password>` start at given password (in dictionary attack this is a start line number)\r\n* `-t <password> | --to <password>` stop at given password (in dictionary attack this is a end line number)\r\n* `-pps <number> | --passwords-per-second <number> Will try the given number of passwords per second (Since 1.1)\r\n* `-w <path>     | --wordlist <path> path to wordlist file (example: /../../wordlist.txt)\r\n\r\nYou can use `--from` and `--to` to parallelize the brute force on several computers.\r\n\r\n> Note: If you want to resume a stopped brute force, I suggest that you take the second last tried password that was stored in `$HOME/AndroidKeystoreRecovery.log`. Indeed, as actor computation is asynchronous, there is no guarantee that every password before the last one were _really_ tried by the software.\r\n\r\n### Character set options &mdash; since 1.1\r\n\r\n* `-lo         | --letters-onlỳ use letters only\r\n* `-no         | --numbers-onlỳ use numbers only\r\n* `-uc         | --upper-casè discards lower-case letters\r\n* `-lc         | --lower-case` discards upper-case letters\r\n* `-ec <chars> | --extra-characters <chars>` add specified characters in combinations\r\n\r\n## Time needed to retrieve password\r\n\r\nBruteforce algorithms are not optimized at all, AKR is faster than other bruteforce tools but it will still try __all__ password possibilities.\r\n\r\nIn our case, we try all the characters like so: `A, B, ..., Z, a, b, ..., z, 0, ..., 9`. This is 62 possibilites for one character of the password.\r\n\r\nDepending on your hardware, AKR will try more or less passwords per second, this is a sample calculation with my own computer:\r\n\r\n```\r\n- AKR velocity: v = 120 000 passwords/seconds\r\n- Number of combinations for a password of length n: 62^n\r\n- Number of combinations for a 6 characters password: 56 800 235 584\r\n- Time needed to try all these combinations: 56 800 235 584 / v = 5.5 days!\r\n- Time needed for 7 character passwords: 5.5 * 62 = 339 days!\r\n```\r\n\r\nAs you can see, brute force with a single computer can take a very long time...\r\n\r\nYou can use the `-f (--from)` and `-t (--to)` options to run AKR on different computers, to parallelize computation and try to shorten the discovery of the password.\r\n\r\n## Technical Information\r\n\r\nThis software runs on the Java Virtual Machine (JVM), so you need to have a Java Runtime Environnement (JRE) installed on your computer. If you don't have one, get it at http://java.com.\r\n\r\nTo benefit from multi-core computers, this software uses the awesome [Akka](http://akka.io) actor library.\r\n\r\n## Development\r\n\r\n* __Pull Requests__: I accept every meaningful pull request that you might offer. Please add description and comments in the code :)\r\n* __Issues__: You can create issues, however, I don't know when I'll have time to fix them (will do my best!)\r\n\r\n## Licence\r\n\r\nCopyright Romain Sertelon 2013\r\n\r\nThis software is licenced under the GNU Public Licence v3 (GPLv3), you can find it in the `LICENCE` file.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}