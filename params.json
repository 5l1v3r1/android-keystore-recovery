{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Android Keystore Recovery","body":"## Android Keystore Recovery\r\n\r\nThis project aims to solve the \"password forgotten\" problem for (Android) developers who happen to manage java keystore(s).\r\n\r\n## Features\r\n\r\nThis bruteforce tool is very simple, yet efficient. It will try all password combinations matching `[A-Za-z0-9]+`, from the shortest password, up to the solution.\r\n\r\nThere are currently three options:\r\n\r\n* `-l <minLength>` sets a minimum length for the password, if you know that it should have at least n characters (can save a lot of time)\r\n* `-f <fromPsswd>` sets the combination from which the brute force should start\r\n* `-t <toPasswd>` sets the last combination that sould be tested\r\n\r\n> Note: If you want to resume a stopped brute force, I suggest that you take the second last tried password that was stored in `$HOME/AndroidKeystoreRecovery.log`. Indeed, as actor computation is asynchronous, there is no guarantee that every password before the last one were _really_ tried by the software.\r\n\r\n## Usage\r\n\r\n1. Download the [project jar](http://download.bluepyth.fr/releases/akr-1.0.1.jar)\r\n2. Launch the bruteforce: `java -jar akr-1.0.1.jar <keystore> [opts]`\r\n\r\n## Time needed to retrieve password\r\n\r\nBruteforce algorithms are not optimized at all, AKR is faster than other bruteforce tools but it will still try __all__ password possibilities.\r\n\r\nIn our case, we try all the characters like so: `A, B, ..., Z, a, b, ..., Z, 0, ..., 9`. This is 62 possibilites for one character of the password.\r\n\r\nDepending on your hardware, AKR will try more or less passwords per second, this is a sample calculation with my own computer:\r\n\r\n```\r\n- AKR velocity: v = 120 000 passwords/seconds\r\n- Number of combinations for a password of length n: 62^n\r\n- Number of combinations for a 6 characters password: 56 800 235 584\r\n- Time needed to try all these combinations: 56 800 235 584 / v = 5.5 days!\r\n- Time needed for 7 character passwords: 5.5 * 62 = 339 days!\r\n```\r\n\r\nAs you can see, brute force with a single computer can take a very long time...\r\n\r\nYou can use the `-f (--from)` and `-t (--to)` options to run AKR on different computers, to parallelize computation and try to shorten the discovery of the password.\r\n\r\n## Technical Information\r\n\r\nThis software runs on the Java Virtual Machine (JVM), so you need to have a Java Runtime Environnement (JRE) installed on your computer. If you don't have one, get it at http://java.com.\r\n\r\nTo benefit from multi-core computers, this software uses the awesome [Akka](http://akka.io) actor library.\r\n\r\n## Development\r\n\r\n* __Pull Requests__: I accept every meaningful pull request that you might offer. Please add description and comments in the code :)\r\n* __Issues__: You can create issues, however, I don't know when I'll have time to fix them (will do my best!)\r\n\r\n## Licence\r\n\r\nCopyright Romain Sertelon 2013\r\n\r\nThis software is licenced under the GNU Public Licence v3 (GPLv3), you can find it in the `LICENCE` file.\r\n","tagline":"A tool to recover your lost Android keystore password "}